Qt window:
    sends: start, stop, pause, reload
    receives: image data (display in widget), console data (display with logging module with handler to widget)
    processes: get mouse location to draw on top of temporary image data in realtime

    Spawns foreground process:
        sends: data to background thread, text to Qt window
        receives: commands from Qt
        processes: mouse position and keyboard status

        Spawns program check thread:
            sends: application, resolution
            processes: which application is loaded

        Spawns background process:
            receives: data from foreground process
            sends: text
            processes: number crunching, saving data


file.mtk2:
    sessions/
        <y-m-d>.json        # [{'start_date': val, 'resolutions': {'1920x1080': ticks}}]

    metadata.json           # {'created': val, 'modified': val, 'file_version': val, 'save_completed': True}

    config/                 # Store settings related to each trackable item
        track/
            <track_name>.json
        heatmap/
            <track_name>.json
        keyboard/
            <track_name>.json

    history/                # Optionally keep a history of x ticks
        track/
            <track_name>.pkl            # [[resolution, (x, y), (x, y)], [resolution, (x, y)]]
        heatmap/
            <track_name>.pkl

    data/
        <width_height>/
            settings.json               # {'render': True}
            stats.json                  # {'mouse_distance': val, 'ticks': val}
            track/
                <track_name>.npy
            heatmap/
                <track_name>.npy
            keyboard/
                counts.json             # {scancode: count}
                time.json               # {scancode: time}
                [disabled] mistakes.json           # if backspace pressed once, record {opcode: {opcode: count}}
                [disabled] consecutive.json        # number of times key followed another {opcode: {opcode: count}}
                [disabled] intervals.json          # time between key processes {opcode: {opcode: time}}
            gamepad/
                counts.json             # {button: count}
                time.json               # {button: time}
                axis.json               # {axis: {value: count}}
            [disabled] joystick/        # Got nothing to test this on
                counts.json             # {button: count}
                time.json               # {button: time}
                axis.json               # {axis: {value: count}}


On load:
    Check "save_completed" flag is set, if not load backup
    Verify all data is valid
    Lazily load what is needed

On save:
    Copy to backup dir
    Delete "save_completed" flag
    Write to temp files in zip
    Move old files
    Move temp files
    Delete old files
    Write "save_completed" flag

Each tracking option will be saved with a json file containing settings.

Track options:
    {
        'name': str,
        'record': 'time|speed|count',               # position over time / speed of mouse / number of passes on pixel
        'contiguous': true,                         # If gaps between updates should draw a line
        'limiter_ticks': int/None,                    # Run the limiter after this many ticks have elapsed
        'limiter_action': 'divide|subtract|trim'   # Divide all / remove start / remove end
        'limiter_amount': int/float,                  # What to divide/subtract from every value
        'scancode_pressed': [],
        'scancode_released': [],
        'history_length': 0,
    }
    # Default is "record: time, contiguous: True, limiter_ticks: 425000, limiter_action: divide, limiter_amount: 1.1"
    # Speed while lmb pressed is "record: speed, contiguous: False, limiter_ticks: None, scancode_pressed: [0x01]"

Heatmap options:
    {
        'name': str,
        'record': 'pressed|held',
        'type': 'single|double',
        'scancode': 0,
        'scancode_pressed': [],
        'scancode_released': [],
        'history_length': 0,
    }

Keyboard options:
    {
        'name': str,
        'record': 'pressed|held',
        'required_presses': '1|2',
        'scancode_pressed': [],
        'scancode_released': [],
    }
