Qt window:
    sends: start, stop, pause, reload
    receives: image data (display in widget), console data (display with logging module with handler to widget)
    processes: get mouse location to draw on top of temporary image data in realtime

    Spawns foreground process:
        sends: data to background thread, text to Qt window
        receives: commands from Qt
        processes: mouse position and keyboard status

        Spawns program check thread:
            sends: application, resolution
            processes: which application is loaded

        Spawns background process:
            receives: data from foreground process
            sends: text
            processes: number crunching, saving data


<game>.mtk2:
    sessions/
        <y-m-d>.json        # [{'start_date': val, 'resolutions': {'1920x1080': ticks}}]

    metadata.json           # {'created': val, 'modified': val, 'version': val, 'save_completed': True, 'ticks': int, selected_track: <track_name>, selected_colour: <colour_name>}

    # Settings for each track type (see below for different data)
    config/
        <track_name>.json

    stats/
        <track_name>.json                               # {'distance': int, 'ticks': int}

    data/
        # Resolution based tracking
        screen/
            <width_height>/
                movement/
                    <track_name>.npy
                heatmap/
                    <track_name>.npy

        # Gamepad / joystick based tracking
        radial/
            movement/
                <track_name>.npy
            heatmap/
                <track_name>.npy

        # Keyboard / gamepad button tracking
        input/
            <track_name>.json                           # {scancode: count/time}

        # History tracking
        history/
            <track_name>.pkl                            # [[resolution, (x, y), (x, y)], [resolution, (x, y)]] - can be tracks or heatmap

    render/
        <track_name>_<colour>.jpg



On load:
    Check "save_completed" flag is set, if not load backup
    Verify all data is valid
    Lazily load what is needed

On save:
    Copy to backup dir
    Delete "save_completed" flag
    Write to temp files in zip
    Move old files
    Move temp files
    Delete old files
    Write "save_completed" flag


Each tracking option will be saved with a json file containing settings.

Common options:
    {
        'name': str,
        'type': 'movement|radial|input',
        'while': {
            'scancode_pressed': [],
            'scancode_not_pressed': [],
            'gamepad_pressed': [],
            'gamepad_not_pressed': [],
        },
    }

Movement options:
    {
        'component': mouse|gamepad_l|gamepad_r|joystick
        'record': 'time|speed|count',               # position over time / speed of mouse / number of passes on pixel
        'contiguous': true,                         # If gaps between updates should draw a line
        'limiter': {
            'enabled': true,                        # If false, just set the limiter to numpys max int value
            'ticks': int,                           # Run the limiter after this many ticks have elapsed
            'action': 'divide|subtract|trim'        # Divide all / remove start / remove end
            'amount': int/float,                    # What to divide/subtract from every value
        },
    }
    # Default is "record: time, contiguous: True, limiter_ticks: 425000, limiter_action: divide, limiter_amount: 1.1"
    # Speed while lmb pressed is "record: speed, contiguous: False, limiter_ticks: None, scancode_pressed: [0x01]"
    # Controller left thumbstick heatmap is "record: count, contiguous: False, limiter_ticks: None"

Heatmap options:
    {
        'component': mouse|gamepad_l|gamepad_r|joystick         # what to use to get the coordinates
        'record': 'pressed|held',
        'presses': int,                             # single / double click
        'scancode': [],
        'gamepad': [],
        'history_length': 0,
    }

Input options:
    {
        'record': 'pressed|held',
    }
